// Method 1 using priority Queue (min heap)
vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        
        vector<int> dist(V,1e9);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
        dist[S] = 0;
        pq.push({0,S});
        
        while(!pq.empty()){
            int node = pq.top().second;
            int cost = pq.top().first;
            pq.pop();
            for(auto it:adj[node]){
                int adjNode = it[0];
                int adjNodeCost = it[1];
                
                if(cost + adjNodeCost < dist[adjNode]){
                    dist[adjNode] = cost + adjNodeCost;
                    pq.push({cost+adjNodeCost,adjNode});
                }
            }
        }
        
        return dist;
    }
    
    // mwthod 2 using set;
    
     vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int> dist(V,1e9);
        set<pair<int,int>> s;
        dist[S] = 0;
        s.insert({0,S});
        
        while(!s.empty()){
            
            auto i = *(s.begin());
            int node = i.second;
            int cost = i.first;
            s.erase(s.begin());
            
            for(auto it:adj[node]){
                
                int adjNode = it[0];
                int adjNodeCost = it[1];
                
                if(cost + adjNodeCost < dist[adjNode]){
                    
                    // erase the existing node
                    if(dist[adjNode] != 1e9){
                        s.erase({dist[adjNode],adjNode});
                    }
                    
                    dist[adjNode] = cost + adjNodeCost;
                    s.insert({cost+adjNodeCost,adjNode});
                }
            }
        }
        
        return dist;
    }
